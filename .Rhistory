library(fastnet)
install.packages("fastnet")
library(fastnet)
library(fastnet)
library(parallel)
library(doparallel)
?net.barabasi.albert()
net.barabasi.albert <- function(n, m, ncores = detectCores(), d = FALSE ){
if (n<=0 | n%%1!=0) stop("Parameter 'n' must be a non negative integer", call. = FALSE)
if (m<=1 | m%%1!=0) stop("Parameter 'm' must be a non negative integer greater than 1", call. = FALSE)
if (!ncores%%1==0){
stop("Parameter 'ncores' must be integer", call. = FALSE)}
else{
if (ncores > detectCores() | ncores < 2)  {
stop("Parameter 'ncores' is lower than 2 or exceed number of available cores",
call. = FALSE)
} else{
if (d == TRUE){
cl <- makeCluster(ncores)  ##Make cluster of cores
on.exit(stopCluster(cl))
registerDoParallel(cl, cores = ncores)
##M0 graph
m0 <- function(n, links){
edge <- seq(1, links)[-n]
edge <- sample(edge, 1)
edge
}
n.init <- seq(1, m)
Net1 <- parLapply(cl = cl, n.init, m0, links = m)
##From link+1 to n - preferntial attachment  + growth process
deg <- function(node, Network){
d <- length(unlist(Network[node]))
d
}
New.edge <- function(new.edge, Network, new.node){
n <- c(unlist(Network[new.edge]), new.node)
n
}
for (i in (m+1):n){
degree <- parLapply(cl = cl, n.init, deg, Network = Net1)
Tdeg <- sum(unlist(degree))
p <- unlist(degree)/Tdeg
new.edge <- sample(n.init, m, prob = p)
Net2 <- parLapply(cl = cl, new.edge, New.edge, Network = Net1, i)
Net1[new.edge] <- Net2
Net1[i] <- list(sort(new.edge))
n.init <- c(n.init, i)
}
Net1
}
else{
neilist <- list()
neilist[n] <- list(NULL)
##Create the m0 graph
df <- c(rep(1, m), m, rep(0, n-m-1))
neilist[[m+1]] <- seq(m)
for (i in (m+2):n){
new.neighbor <- sample(seq(n),m,prob = df)
neilist[[i]] <- new.neighbor
df[i] <- m
df[new.neighbor] <- df[new.neighbor] + 1  ####
}
if (n < ncores) {
ncores = n
} else { }
cl <- makeCluster(ncores) ##Make cluster of cores
on.exit(stopCluster(cl))
registerDoParallel(cl, cores = ncores)
reverse.connect <- function(i){
reverse.neilist <- list()
reverse.neilist[n] <- list(NULL)
for (j in seq(i,n,ncores)  ){
for (k in neilist[[j]]){
reverse.neilist[[k]] <- c(reverse.neilist[[k]],j)
}
}
reverse.neilist
}
cfun <- function(a,b){
cc <- mapply(c,a,b, SIMPLIFY=FALSE)
cc
}
i <- NULL
reverselist <- foreach(i = 1:ncores, .combine='cfun') %dopar% reverse.connect(i)
Network <- mapply(c,neilist,reverselist, SIMPLIFY=FALSE)
Network
}
}
}
}
net.barabasi.albert(50,2,detectCores(),TRUE)
install.packages("doParallel")
library(doparallel)
library(doParallel)
net.barabasi.albert(50,2,detectCores(),TRUE)
test <- net.barabasi.albert(50,2,detectCores(),TRUE)
install.packages("igraph")
draw.net <- function(net) {
net.ig <- igraph::as.undirected(igraph::graph_from_adj_list(net))
graphics::plot(net.ig)
}
draw.net(test)
test <- net.barabasi.albert(50,1,detectCores(),TRUE)
draw.net(test)
test <- net.barabasi.albert(50,1,1,TRUE)
test <- net.barabasi.albert(50,2,1,TRUE)
test <- net.barabasi.albert(50,2,2,TRUE)
draw.net(test)
metric.cluster.global <- function(g){
if (!is.list(g)) stop("Parameter 'g' must be a list",call. = FALSE)
ig <- simplify(as.undirected(graph_from_adj_list(g)))
CC <- transitivity(ig)
CC
}
metric.cluster.global(test)
library(igraph)
metric.cluster.global(test)
test <- net.barabasi.albert(100,2,2,TRUE)
draw.net(test)
metric.cluster.global(test)
test <- net.barabasi.albert(100,4,2,TRUE)
draw.net(test)
metric.cluster.global(test)
test <- net.barabasi.albert(100,3,3,TRUE)
draw.net(test)
metric.cluster.global(test)
test <- net.barabasi.albert(100,3,5,TRUE)
test <- net.barabasi.albert(100,5,5,TRUE)
draw.net(test)
test <- net.barabasi.albert(500,2,2,TRUE)
draw.net(test)
metric.cluster.global(test)
test <- net.barabasi.albert(10,2,2,TRUE)
draw.net(test)
metric.cluster.global(test)
test <- net.barabasi.albert(30,2,2,TRUE)
draw.net(test)
#' @description Present the first 10 degrees of a network.
#' @param g	The input network.
#' @details Present the first 10 degrees of a network.
#' @return A vector.
#' @author Xu Dong, Nazrul Shaikh.
#' @examples \dontrun{
#' x <-  net.ring.lattice(12,4)
#' preview.deg(x)}
#' @export
#'
preview.deg <- function(g) {
utils::head(lengths(g), n = 10L)
}
preview.deg(test)
draw.degdist.cum <- function(net){
graphics::plot(stats::ecdf(lengths(net)),xlab="Degree",ylab="Prob",main="")
}
draw.degdist.cum(test)
draw.degdist <- function(net){
freq <- as.data.frame(table(lengths(net)))
freq$Freq <- freq$Freq/length(net)
graphics::plot(freq, xlab="Degree", ylab = "Prob")
}
draw.degdist(test)
test <- net.barabasi.albert(50,2,2,TRUE)
draw.net(test)
metric.cluster.global(test)
draw.degdist(test)
View(test)
histo.dist <- function(g) {
graphics::hist(lengths(g),breaks = 1000, xlab = "Degree", main = NULL)
}
histo.dist(test)
test <- net.barabasi.albert(50,2,2,TRUE)
draw.net(test)
test <- net.barabasi.albert(50,2,2,FALSE)
draw.net(test)
histo.dist(test)
test <- net.barabasi.albert(50,2,2,TRUE)
draw.net(test)
metric.cluster.global(test)
histo.dist(test)
test <- net.barabasi.albert(50,4,detectCores(),TRUE)
draw.net(test)
test <- net.barabasi.albert(50,10,detectCores(),TRUE)
draw.net(test)
test <- net.barabasi.albert(50,2,detectCores(),TRUE)
draw.net(test)
histo.dist(test)
test <- net.barabasi.albert(500,2,detectCores(),TRUE)
draw.net(test)
histo.dist(test)
View(test)
test[[1]]
test <- net.barabasi.albert(10,2,detectCores(),TRUE)
draw.net(test)
View(test)
test <- net.barabasi.albert(10,2,detectCores(),FALSE)
draw.net(test)
histo.dist(test)
View(test)
test <- net.barabasi.albert(10,2,detectCores(),TRUE)
draw.net(test)
View(test)
test_matrix <- matrix(unlist(test), nrow=10)
test_unlist <- unlist(test)
population <- 10
m <- 2
test <- net.barabasi.albert(population,m,detectCores(),TRUE)
draw.net(test)
test_matrix <- matrix(,population,)
View(test_matrix)
test_matrix <- matrix(population,population,)
View(test_matrix)
test_matrix <- matrix(,population,population)
View(test_matrix)
test[1]
test[1,2]
test[1]
test[1][2]
test[[1]]
neighbors <- function(net,node) {
net[[node]]
}
?get.adjacency()
get.adjacency(test)
neighbors(test,1)
test_neighbors<-neighbors(test,1)
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]<-1, initial_matrix[i,j]<-0)
}
}
initial_matrix <- matrix(,population,population)
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]<-1, initial_matrix[i,j]<-0)
}
}
View(initial_matrix)
connection_vector <- neighbors(test, i)
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]<-1, initial_matrix[i,j]<-0)
}
}
View(initial_matrix)
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]<-1, initial_matrix[i,j]<-0)
}
}
View(initial_matrix)
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}
}
initial_matrix <- matrix(,population,population)
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}
}
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}}
initial_matrix <- matrix(,population,population)
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}}
View(initial_matrix)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}}
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}}
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}}
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}
}
for(i in 1:population) {
connection_vector <- neighbors(test, i)
for (j in 1: population) {
ifelse(connection_vector %in% j, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}
}
connection_vector <- neighbors(test,i)
View(test)
neighbors(test, 2)
for(i in 1:population) {
connection_vector <- neighbors(test,i)
for (j in 1: population) {
ifelse(j %in% connection_vector, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}
}
for(i in 1:population){
connection_vector <- neighbors(test,i)
for (j in 1: population) {
ifelse(j %in% connection_vector, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}
}
for(i in 1:population){
connection_vector <- neighbors(test,i)
for (j in 1: population) {
ifelse('j' %in% connection_vector, initial_matrix[i,j]=1, initial_matrix[i,j]=0)
}
}
for(i in 1:population){
connection_vector <- neighbors(test,i)
for (j in 1: population) {
ifelse(j %in% connection_vector, initial_matrix[i,j]<-1, initial_matrix[i,j]<-0)
}
}
View(initial_matrix)
test <- net.barabasi.albert(population,m,detectCores(),TRUE)
draw.net(test)
initial_matrix <- matrix(,population,population)
for(i in 1:population){
connection_vector <- neighbors(test,i)
for (j in 1: population) {
ifelse(j %in% connection_vector, initial_matrix[i,j]<-1, initial_matrix[i,j]<-0)
}
}
View(initial_matrix)
#writing the code to take the list generated by test and use it to populate the empty matrix
populate_matrix <- function(empty_matrix) {
for(i in 1:population){
connection_vector <- neighbors(network,i)
for (j in 1: population) {
ifelse(j %in% connection_vector, empty_matrix[i,j]<-1, empty_matrix[i,j]<-0)
}
}
}
population <- 10
m <- 2
network <- net.barabasi.albert(population,m,detectCores(),TRUE)
draw.net(test)
initial_matrix <- matrix(,population,population)
filled_matrix <- populate_matrix(initial_matrix)
population <- 10
m <- 2
test <- net.barabasi.albert(population,m,detectCores(),TRUE)
draw.net(test)
initial_matrix <- matrix(,population,population)
#writing the code to take the list generated by test and use it to populate the empty matrix
for(i in 1:population){
connection_vector <- neighbors(test,i)
for (j in 1: population) {
ifelse(j %in% connection_vector, initial_matrix[i,j]<-1, initial_matrix[i,j]<-0)
}
}
View(initial_matrix)
